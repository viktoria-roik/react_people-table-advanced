{"version":3,"sources":["utils/helpers.ts","components/Navbar.tsx","components/pages/HomePage.tsx","components/Loader/Loader.tsx","api.ts","utils/constants.ts","components/PersonLink.tsx","components/People.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleTable.tsx","components/PeopleFilters.tsx","components/pages/PeoplePage.tsx","utils/filterPeoplePageFunctions.ts","components/pages/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["getSortPeople","a","b","orderOfSort","localeCompare","Navigation","linkClass","isActive","classNames","getLinkClass","className","role","to","HomePage","Loader","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","FEMALE_SEX","MALE_SEX","ALL_CENTURIES","PersonLink","person","sex","name","slug","useSearchParams","searchParams","toString","state","personSlug","People","selectedPerson","born","died","mother","father","motherName","fatherName","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","search","PeopleTable","people","useParams","sortFilter","get","orderFilter","handleSortFilter","param","handleOrderFilter","sort","order","map","PeopleFilters","setSearchParams","sexFilter","centuriesFilter","getAll","query","type","placeholder","onChange","event","target","century","updatedCenturies","includes","filter","cent","centuries","href","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","useEffect","getPeople","catch","finally","preparedPeople","find","getPreparedPeople","filteredPeople","filterBySex","length","Math","ceil","filterByCenturies","queryLowerCase","toLowerCase","filterByQuery","sortPeople","noPeopleMessage","noMatchingPeople","NotFoundPage","App","path","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.d35060b3.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { Person } from '../types';\n\nexport function getPreparedPeople(people: Person[]) {\n  return people.map((person) => {\n    const mother = people\n      .find(({ name }) => name === person.motherName);\n    const father = people\n      .find(({ name }) => name === person.fatherName);\n\n    return { ...person, mother, father };\n  });\n}\n\nexport function getSortPeople(\n  a: string | number,\n  b: string | number,\n  orderOfSort: string | null,\n) {\n  if (typeof a === 'string'\n  && typeof b === 'string'\n  && orderOfSort === null) {\n    return a.localeCompare(b);\n  }\n\n  if (typeof a === 'string'\n  && typeof b === 'string'\n  && orderOfSort === 'desc') {\n    return b.localeCompare(a);\n  }\n\n  if (typeof a === 'number'\n  && typeof b === 'number'\n  && orderOfSort === null) {\n    return a - b;\n  }\n\n  return (b as number) - (a as number);\n}\n\nexport const getLinkClass = ({ isActive }: { isActive: boolean }) => classNames(\n  'navbar-item',\n  { 'has-background-grey-lighter': isActive },\n);\n","import { NavLink } from 'react-router-dom';\nimport { getLinkClass } from '../utils/helpers';\n\nexport const Navigation: React.FC = () => {\n  const linkClass = ({ isActive }: { isActive: boolean }) => getLinkClass(\n    { isActive },\n  );\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={linkClass}\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            to=\"/people\"\n            className={linkClass}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const HomePage: React.FC = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export const ERROR_MESSAGE = 'Something went wrong';\nexport const NO_PEOPLE_ON_SERVER = 'There are no people on the server';\nexport const NO_MATCHING_PEOPLE\n= 'There are no people matching the current search criteria';\n\nexport const FEMALE_SEX = 'f';\nexport const MALE_SEX = 'm';\nexport const EMPTY_VALUE = '-';\nexport const CENTURY_LENGTH = 100;\nexport const ALL_CENTURIES = ['16', '17', '18', '19', '20'];\n","import { Link, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\nimport { FEMALE_SEX } from '../utils/constants';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { sex, name, slug } = person;\n  const [searchParams] = useSearchParams();\n\n  return (\n    <td>\n      <Link\n        to={`../${slug}?${searchParams.toString()}`}\n        state={{ personSlug: slug }}\n        className={classNames({\n          'has-text-danger': sex === FEMALE_SEX,\n        })}\n      >\n        {name}\n      </Link>\n    </td>\n  );\n};\n","import classNames from 'classnames';\nimport { Person } from '../types';\nimport { EMPTY_VALUE } from '../utils/constants';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  person: Person;\n  selectedPerson: string;\n};\n\nexport const People: React.FC<Props> = ({ person, selectedPerson }) => {\n  const {\n    sex,\n    born,\n    died,\n    mother,\n    father,\n    motherName,\n    fatherName,\n    slug,\n  } = person;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      key={slug}\n      className={\n        classNames({ 'has-background-warning': selectedPerson === slug })\n      }\n    >\n      <PersonLink person={person} />\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n\n      {mother\n        ? (\n          <PersonLink person={mother} />\n        ) : (\n          <td>\n            {motherName || EMPTY_VALUE}\n          </td>\n        )}\n      {father\n        ? (\n          <PersonLink person={father} />\n        ) : (\n          <td>\n            {fatherName || EMPTY_VALUE}\n          </td>\n        )}\n    </tr>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { People } from './People';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { personSlug = '' } = useParams();\n  const [searchParams] = useSearchParams();\n  const sortFilter = searchParams.get('sort');\n  const orderFilter = searchParams.get('order');\n\n  const handleSortFilter = (param: string) => {\n    if (sortFilter === null && orderFilter === null) {\n      return param;\n    }\n\n    if (sortFilter === param && orderFilter === null) {\n      return param;\n    }\n\n    return null;\n  };\n\n  const handleOrderFilter = (param: string) => {\n    if (sortFilter === null && orderFilter === null) {\n      return null;\n    }\n\n    if (sortFilter === param && orderFilter === null) {\n      return 'desc';\n    }\n\n    return null;\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <SearchLink\n                params={{\n                  sort: handleSortFilter('name'),\n                  order: handleOrderFilter('name'),\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas fa-sort', {\n                    'fa-sort-up': orderFilter === 'desc'\n                      && sortFilter === 'name',\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <SearchLink\n                params={{\n                  sort: handleSortFilter('sex'),\n                  order: handleOrderFilter('sex'),\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas fa-sort', {\n                    'fa-sort-up': orderFilter === 'desc'\n                      && sortFilter === 'sex',\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <SearchLink\n                params={{\n                  sort: handleSortFilter('born'),\n                  order: handleOrderFilter('born'),\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas fa-sort', {\n                    'fa-sort-up': orderFilter === 'desc'\n                      && sortFilter === 'born',\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <SearchLink\n                params={{\n                  sort: handleSortFilter('died'),\n                  order: handleOrderFilter('died'),\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas fa-sort', {\n                    'fa-sort-up': orderFilter === 'desc'\n                      && sortFilter === 'died',\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map((person) => (\n          <People\n            person={person}\n            key={person.slug}\n            selectedPerson={personSlug}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { ALL_CENTURIES, FEMALE_SEX, MALE_SEX } from '../utils/constants';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const sexFilter = searchParams.get('sex');\n  const centuriesFilter = searchParams.getAll('centuries');\n  const query = searchParams.get('query') as string;\n\n  const handleChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    setSearchParams(getSearchWith(searchParams, {\n      query: event.target.value || null,\n    }));\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({\n            'is-active': sexFilter === null,\n          })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={classNames({\n            'is-active': sexFilter === MALE_SEX,\n          })}\n          params={{ sex: MALE_SEX }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={classNames({\n            'is-active': sexFilter === FEMALE_SEX,\n          })}\n          params={{ sex: FEMALE_SEX }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {ALL_CENTURIES.map(century => {\n              const isCenturyIncluded = centuriesFilter.includes(century);\n              const updatedCenturies = isCenturyIncluded\n                ? centuriesFilter.filter(cent => cent !== century)\n                : [...centuriesFilter, century];\n\n              return (\n                <SearchLink\n                  key={century}\n                  data-cy=\"century\"\n                  className={classNames('button', 'mr-1', {\n                    'is-info': centuriesFilter.includes(century),\n                  })}\n                  params={{\n                    centuries: updatedCenturies,\n                  }}\n                >\n                  {century}\n                </SearchLink>\n              );\n            })}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <a\n          className=\"button is-link is-outlined is-fullwidth\"\n          href=\"#/people\"\n        >\n          Reset all filters\n        </a>\n      </div>\n    </nav>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Loader } from '../Loader';\nimport { Person } from '../../types';\nimport { getPeople } from '../../api';\nimport { PeopleTable } from '../PeopleTable';\nimport { PeopleFilters } from '../PeopleFilters';\nimport {\n  ERROR_MESSAGE,\n  NO_MATCHING_PEOPLE,\n  NO_PEOPLE_ON_SERVER,\n  ALL_CENTURIES,\n} from '../../utils/constants';\nimport { getPreparedPeople } from '../../utils/helpers';\nimport {\n  filterByCenturies,\n  filterByQuery,\n  filterBySex,\n  sortPeople,\n} from '../../utils/filterPeoplePageFunctions';\n\nexport const PeoplePage: React.FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isError, setIsError] = useState<boolean>(false);\n  const [searchParams] = useSearchParams();\n\n  const centuries = searchParams.getAll('centuries') || ALL_CENTURIES;\n  const query = searchParams.get('query') as string;\n  const order = searchParams.get('order');\n  const sort = searchParams.get('sort') as string;\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople()\n      .then(setPeople)\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n  const preparedPeople = getPreparedPeople(people);\n\n  const filteredPeople = preparedPeople\n    .filter((person) => filterBySex(person, searchParams))\n    .filter((person) => filterByCenturies(person, centuries))\n    .filter((person) => filterByQuery(person, query))\n    .sort((a, b) => sortPeople(a, b, sort, order));\n\n  const noPeopleMessage = !people.length && !isLoading && !isError;\n  const noMatchingPeople = !isLoading && !filteredPeople.length;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {!isLoading\n              && <PeopleFilters /> }\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {isError\n                && <p data-cy=\"peopleLoadingError\">{ERROR_MESSAGE}</p>}\n\n              {noPeopleMessage\n                && (\n                  <p data-cy=\"noPeopleMessage\">\n                    {NO_PEOPLE_ON_SERVER}\n                  </p>\n                )}\n\n              {noMatchingPeople\n                && (\n                  <p>\n                    {NO_MATCHING_PEOPLE}\n                  </p>\n                )}\n\n              {!isLoading && (\n                <PeopleTable\n                  people={filteredPeople}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\nimport { FEMALE_SEX, MALE_SEX } from './constants';\nimport { getSortPeople } from './helpers';\n\nexport function filterBySex(person: Person, searchParams: URLSearchParams) {\n  if (searchParams.toString().includes(MALE_SEX)) {\n    return person.sex === MALE_SEX;\n  }\n\n  if (searchParams.toString().includes(FEMALE_SEX)) {\n    return person.sex === FEMALE_SEX;\n  }\n\n  return true;\n}\n\nexport function filterByCenturies(\n  person: Person, centuries: string[],\n): boolean {\n  if (centuries.length !== 0) {\n    return centuries.includes(Math.ceil(person.born / 100).toString());\n  }\n\n  return true;\n}\n\nexport function filterByQuery(person: Person, query: string | null) {\n  if (query !== null) {\n    const queryLowerCase = query.toLowerCase();\n\n    return (\n      person.name.toLowerCase().includes(queryLowerCase)\n      || (person.motherName\n        && person.motherName.toLowerCase().includes(queryLowerCase))\n      || (person.fatherName\n        && person.fatherName.toLowerCase().includes(queryLowerCase))\n    );\n  }\n\n  return true;\n}\n\nexport function sortPeople(\n  a: Person,\n  b: Person,\n  sort: string,\n  order: string | null,\n): number {\n  if (sort === 'name') {\n    return getSortPeople(a.name, b.name, order);\n  }\n\n  if (sort === 'sex') {\n    return getSortPeople(a.sex, b.sex, order);\n  }\n\n  if (sort === 'born') {\n    return getSortPeople(a.born, b.born, order);\n  }\n\n  if (sort === 'died') {\n    return getSortPeople(a.died, b.died, order);\n  }\n\n  return 0;\n}\n","export const NotFoundPage: React.FC = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import {\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\n\nimport './App.scss';\nimport { Navigation } from './components/Navbar';\nimport { HomePage } from './components/pages/HomePage';\nimport { PeoplePage } from './components/pages/PeoplePage';\nimport { NotFoundPage } from './components/pages/NotFoundPage';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navigation />\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n\n            <Route path=\"/people\">\n              <Route path=\":personSlug?\" element={<PeoplePage />} />\n            </Route>\n\n            <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n\n            <Route path=\"*\" element={<NotFoundPage />} />\n          </Routes>\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}